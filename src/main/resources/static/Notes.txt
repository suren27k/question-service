What happened?

1. Create a table in DB for storing questions.
2. Using some open source API, gather questions and manually insert them in DB.
3. Create CRUD operation for questions.
4. Create quiz
	1. No need to manually create quiz table and mapping table in DB. They will be auto-created in the next run of the
	   application when we create the entities and add the required annotations like @ManyToMany, @Entity, etc.

	   Note: We do not have to manually create these tables. We just code in the entities and they are auto created
	   in the next run of the application.

	2. This part is a bit tricky. See how the SQL works in @Query annotation in QuizService. Also look at @ManyToMany.
		1. In the SQL query, we use colon operator to mention outside variables of java within it.
		2. What is nativeQuery here?
	3. One table is quiz table. The second is a mapping table for mapping quiz and questions.
	4. Why 2 tables were created? Because this is a many-many mapping.
	5. Why is this not a one-many mapping? One quiz has many questions right?
		1. When deciding between the 4 mappings : one-one, one-many, many-one, many-many, always think from both
			side. Does one quiz have many questions? Can one question be on many quiz?
		2. Since answer is yes to both questions, we have many-many mapping here.


Fetching a quiz
1. Instead of returning a quiz object, we return only the list of questions.
2. We do not need to include the correct answer, difficulty, category in this request.
3. So, we create a new entity QuestionWrapper without those fields.
4. In QuizService, we get the quiz and store it in Optional - otherwise compiler error because Dao might return null if
   no entry is found in the DB for the given ID.
5. Now, we manually copy all required fields from fetcher Questions to QuestionWrappers.


Submitting quiz and evaluating the score (/submit)
1. Instead of checking if chosen option is correct answer or not, check if the value of chosen option is same as the
    value of correct answer.
2. The id of question if going to be in the path and the responses to each question will in the request body - so here,
    we have @PathVariable and @ResponseBody for the same function in the arguments list.
3. We have to create a new class QuizResponse for ORM of the responses sent to server. We use @RequiredArgsConstructor
    to make both default and all params constructor available through lombok.
4. Calculating quiz score is business logic - so we do it in service layer.

Converting to Microservices
1. Must makes separate the app into QuizService and QuestionService (not the classes in service layer but microservices).
2. QuizService must talk to QuestionService via HTTP/REST request to create a quiz.
3. QuizService must again talk to QuestionService to evaluate the result of a quiz.
4. If we have both as separate services, then they will likely be replicated in multiple servers. How do we find the
    IP addresses? How we select which server must also depend on load balancing.
5. So, we need an API gateway with maybe a service discovery/registry service.
6. What if question service is down when quiz service wants to talk to it? We have to do "failed fast" - which is used
    to tell the client that a service is not responding so that the client can explore alternative options. Here, the
    client is Quiz Service. Circuit breaker!
7. Every microservice is a separate project in the IDE!
8. Client (user) will not interact with QuestionMS. Client will send request to QuizMS only.
9. Dependencies: JPA, PostgreSQL Driver, Web, Lombok, OpenFeign, Eureka Discovery Client
10. Initially comment out OpenFeign and Eureka in pom.xml.
11. Separate DBs must be created for each service.

--------------------------------------------------------------------------------------------------------

######### Notes for Question MicroService #########
1. We have to create a separate DB for each service. Obviously, one service cannot access the DB of the other service.
2. Evaluating score happened in the QuizService class of the monolithic implementation. However, since the answers are
    Question DB, we need to calculate score in the Question MicroService (MS).

Generating a Quiz - What happens in Question MS?
1. The QuizMS will send a /generate request to QuestionMS.
2. The Quiz MS does not need to know all the data of the questions. It only need the IDs of the questions randomly
    picked for it to store in the mapping table.
3. So, it is enough if we return an list of IDs to Quiz MS's generate quiz request.
4. So, we change the SQL query here - no need for "select *" as we only need IDs. So, "select id" is enough.

Handling request for questions
1. When a get request for quiz is received, QuizMS must call QuestionMS to get the questions.
2. Here, we need to send a list of QuestionWrapper because no one else needs to know the right answers.
3. It is a post request because we are sending data (list of IDs) to the server.

    NOTE: See when to use post and get.


Calculating Score
1. This is a post request because we are sending answers of a user to the server to get the score.


CREATING MULTIPLE INSTANCES OF A MS (We run them on different ports)
1. Near run button in IntelliJ, we have name of the app. Click on it and choose Edit Configurations.
2. Every project will have a default config automatically created at port 8080.
3. Click on default config and click copy button at the top-left toolbar of the dialog box.
4. Change the name if needed.
5. In the new config, in the Build and Run section, choose Modify Options --> Add VM options.
6. Now the box near SDK version of java will not be disabled anymore. It is just below the Modify options button.
7. In this box, type: -Dserver.port=8081. Click apply/save and the dialog will close.
8. Now, again on the button near the run button where app name is displayed, click on to see all configurations.
9. Choose each one and run it.


######### Notes for Quiz MicroService #########
1. We want this MS to:
    1. Create quiz
    2. Get a created quiz
    3. Get score
2. For create quiz, we need to send a request from QuizMS to QuestionMS. This is done via REST Template.
3. RestTemplate is a class in spring framework.
4. At this point, we do not want to hardcode the port numbers or URLs or IP address in to our java code.
5. So, we turn to the previously commented out 2 dependencies: Eureka and OpenFeign.


~~~~~~~~~~~~~ Setting Up Eureka ~~~~~~~~~~~~~
1. Service Discovery.
2. All MS must register themselves to the Eureka Server. It happens automatically when we have a eureka server and if
    all MS have the Eureka Client dependency. No need to manually guide the client to register with the server.
3. One MS can lookup the address of another MS using a Eureka Client. So, include client dependency in every MS that
    needs to communicate with other MS.
4. So, create another project for Eureka Server and add 2 dependency: web, Eureka Server.
5. Add @EnableEurekaServer in main application java file below @SpringBootApplication.
6. Look at application properties for configs.
7. By default it runs on port 8761, but add it anyway in application properties.
8. Run it and go to localhost:8761 and see all the details of the Eureka Server.
9. Now register the QuestionMS with this Eureka Server:
    1. Uncomment the 2 dependencies. Run it.
    2. Now, in the eureka server, we can see an application registered with name "Unknown".
    3. In log (console) of QuestionMS, we can see an entry at the last regarding this.
    4. Add a name for QuestionMS in application properties using spring.application.name property.
    5. Now the name would have changed in the eureka server. Note how availability Zones is 1.
    6. Now run the second instance of question service. Now availability zones will be 2 in eureka server.
    7. It automatically knows that both are of the same instance.
10. How can a service find another service using this service registry? OpenFeign comes into picture here.
11. We want to get questions from QuestionMS for creating a quiz in QuizMS. That is the next step.

~~~~~~~~~~~~~ OpenFeign ~~~~~~~~~~~~~
1. Allows us to not hardcode everything in RestTemplate.
2. Allows us to do only what we want to do. No unnecessary other code/configs.
3. We create an interface for this purpose and related files are put in the package feign.
4. In the interface:
    1. Name it something appropriate.
    2. Add @FeignClient and mention the name of the service it is going to connect to.
    3. We want to connect to "QUESTION_SERVICE" --> all caps as shown in the eureka server.
    4. Give declarations of the methods you are going to call in this interface - yes, we need to declare the methods
        in question interface that we need to call, here in this interface.
    5. We need three methods:
        1. /generate --> for creating a quiz we need to get the questions.
        2. /getQuestions --> when client requests a quiz, we need to get the questions for it.
        3. /getScore --> we need to check if the answers chosen are correct answers.
    6. For all the above endpoints, we have a corresponding method in QuestionMS -->  need to declare them here.
    7. Add the main path URL to the mapping urls --> /question is the main path for questionMS. We need to add it to
        mappings like /generate to make it question/generate.
5. So, feign allows us to basically call a method of another MS, without using any rest request manually created at our
    end. It looks for the value inside @FeignClient, and connects to it via the Eureka Server.
6. Thus, with feign, we do not need to use RestTemplate.
7. Add @EnableFeignClients in the main application java file.

Continuing in QuizMS
1. Previously, we were storing list of questions in quiz entity. That is no longer needed. So, change it to a list of
    Integers to store the ids.
2. @ManyToMany should not be used for a list of basic data type (integers here). So, change it to @ElementCollection.
3. Since question table and quiz table are in different DBs, we are not storing references in DBs (no foreign keys).
4. Make changes in application properties:
    1. Give a name for the MS.
    2. Set a different port number.
5. Run the server, and now you can see it registered in eureka server. Can also see tables created in DB.
6. Now, send a request from postman to /quiz/create with body having:
    {"categoryName": "History", "noOfQuestions": 5, "title": "Quiz 1"}.
7. For this request, quizMS will send use feign to send a request to /question/generate.
8. If the request is successful, we can find the tables populated in DB.
9. Note: If client-to-quizMS is a post request, should the quizMS-to-questionMS request be also post? Can we mix and
    match? Check and verify.
10. Call the other 2 methods and see if everything works.

BUT!!! If multiple instances of QuestionMS were running, which one was called by feign in QuizMS for above request?
Answer:
    1. Feign takes care of it. Load balancer dependency is already included.
    2. But how to verify it? We use the Environment class of spring framework (not hibernate).
    3. Check the code in Question Controller of QuestionMS inside the getQuestionsForQuiz() method.
    4. Make sure the click the send button in postman rapidly for a few times to see the effect.


------------- API Gateway -------------
1. User should not have to login for every MS in an application.
2. We move some cross cutting concerns to this API Gateway to make the app seamless.
3. Create a new project with 2 dependencies: Gateway, eureka client.
4. Open it and give it a name and a different port number.
    1. We have 2 instance of QuestionMS running on 8080, 8081.
    2. We have QuizMS running on 8090.
    3. We have Eureka Server running on 8761.
    4. Give API Gateway port number as 8765.
5. Start the server.
6. Now, we have to send every request to port 8765 only. All requests go to the API gateway.
7. BUT How does API Gateway know to which service it must forward a request?
    1. We have to include the service name in the request URL.
    2. Instead of sending a request to http://localhost:8090/quiz/get/1  we must send it to the following URL
        http://localhost:8765/QUIZ-SERVICE/quiz/get/1
    3. Notice the port numbers, service name as seen in the eureka server.
    4. Having both Gateway and eureka client dependencies mean they automatically communicate.
    5. But we need to enable the API Gateway access to the eureka server via a config in application properties.
        The property is "spring.cloud.gateway.discovery.locator.enabled=true"
    6. So need to say QUIZ-SERVICE means QuizMS to the API Gateway. It is automatic!
    7. If we want to not use uppercase letters in URL for the service name, we can add another config which allows that
        to happen:  "spring.cloud.gateway.discovery.locator.lower-case-service-id=true".
    8. After the above change, we can send request to URL:  http://localhost:8765/quiz-service/quiz/get/1
    9. It is possible to not mention the service name at all in the URL. Lookup ways to do that.
8. So:
    1. A browser or postman client sends a request to APi Gateway.
    2. API Gateway finds the service via Eureka Server and forwards the request to it.
    3. The Quiz Service will then depend on the included load balancer dependency to send request to the QuestionMS
        instance which is free or has better availability at the time.





